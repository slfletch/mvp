---
apiVersion: tekton.dev/v1beta1
kind: ClusterTask
metadata:
  name: image-upload-scan
  namespace: default
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: docker, build-image, push-image, dind
    tekton.dev/displayName: docker-build
spec:
  description: >-
    Pull images from upstream, tag them, upload to Harbor and scan.
  params:
  - name: image
    description: Reference of the image docker will produce.
  - name: builder_image
    description: The location of the docker builder image.
    default: docker
  - name: dockerfile
    description: Path to the Dockerfile to build.
    default: ./Dockerfile
  - name: context
    description: Path to the directory to use as context.
    default: .
  - name: build_extra_args
    description: Extra parameters passed for the build command when building images.
    default: ""
  - name: push_extra_args
    description: Extra parameters passed for the push command when pushing images.
    default: ""
  - name: insecure_registry
    description: Allows the user to push to an insecure registry that has been specified
    default: ""
  workspaces:
  - name: source
  results:
  - name: IMAGE_DIGEST
    description: Digest of the image just built.
  steps:
  - name: docker-pull
    image: $(params.builder_image)
    env:
    # Connect to the sidecar over TCP, with TLS.
    - name: DOCKER_HOST
      value: tcp://localhost:2376
    # Verify TLS.
    - name: DOCKER_TLS_VERIFY
      value: '1'
    # Use the certs generated by the sidecar daemon.
    - name: DOCKER_CERT_PATH
      value: /certs/client
    workingDir: $(workspaces.source.path)
    script: |
      docker pull docker.io/port/nrf:jarvis-alpha
    volumeMounts:
      - mountPath: /certs/client
        name: dind-certs
  - name: docker-tag-push
    image: $(params.builder_image)
    env:
      # Connect to the sidecar over TCP, with TLS.
    - name: DOCKER_HOST
      value: tcp://localhost:2376
      # Verify TLS.
    - name: DOCKER_TLS_VERIFY
      value: '1'
      # Use the certs generated by the sidecar daemon.
    - name: DOCKER_CERT_PATH
      value: /certs/client
    workingDir: $(workspaces.source.path)
    script: |
      docker tag docker.io/port/nrf:jarvis-alpha benld.localdomain:30003/nrf/nrf:jarvis-alpha
    volumeMounts:
      - mountPath: /certs/client
        name: dind-certs
    # Wait for the dind
  sidecars:
  - image: docker:dind
    name: server
    args:
      - --storage-driver=vfs
      - --insecure-registry=$(params.insecure_registry)
      - --userland-proxy=false
      - --debug
    securityContext:
      privileged: true
    env:
    # Write generated certs to the path shared with the client.
    - name: DOCKER_TLS_CERTDIR
      value: /certs
    volumeMounts:
    - mountPath: /certs/client
      name: dind-certs
    # Wait for the dind daemon to generate the certs it will share with the
    # client.
    readinessProbe:
      periodSeconds: 1
      exec:
        command: ['ls', '/certs/client/ca.pem']
  volumes:
  - name: dind-certs
    emptyDir: {}
...
